import React, { useState } from 'react';
import axios from 'axios';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  FormControlLabel,
  Checkbox,
  Button,
  Snackbar,
  Alert,
  IconButton,
  Typography,
  useTheme,
  useMediaQuery
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import CloseIcon from '@mui/icons-material/Close';
import { setUser } from '../redux/userSlice';
import { useDispatch } from 'react-redux';

const CreateUser = ({ open, onClose }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.between('sm', 'md'));
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const inputStyle = {
    flex: 1,
    padding: isMobile ? '8px' : '10px',
    paddingRight: '10px',
    borderRadius: '50px',
    border: 'none',
    background: '#47515A',
    color: 'white',
    fontSize: isMobile ? '0.8rem' : '0.9rem',
    textAlign: 'right',
    outline: 'none',
    fontFamily: 'Heebo, sans-serif',
    height: isMobile ? '25px' : '30px',
    width: '100%',
    boxSizing: 'border-box',
    fontWeight: 200,
  };

  const [formData, setFormData] = useState({
    fullName: '',
    displayName: '',
    phoneNumber: '',
    additionalPhone: '',
    email: '',
    city: '',
    isSeller: false,
    password: '',
    isAutoGeneratedPassword: false
  });
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: '' });
  const [termsAccepted, setTermsAccepted] = useState(false);

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData((prevData) => {
      const newFormData = { ...prevData, [name]: value };
      if (name === "password") {
        newFormData.isAutoGeneratedPassword = event.nativeEvent.inputType === 'insertReplacementText';
      }
      return newFormData;
    });
  };

  const validateEmail = (email) => {
    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return regex.test(email);
  };

  const validatePhone = (phone) => {
    const regex = /^[0-9]{10}$/;
    return regex.test(phone);
  };

  const validatePassword = (password) => {
    const regex = /^(?=.*[a-z])(?=.*[A-Z])[A-Za-z\d@$!%*?&]{8,}$/;
    return regex.test(password);
  };

  const handleCreateUserSubmit = async (event) => {
    event.preventDefault();
    console.log(validatePassword("ZrEx2fi24c@@NKt"));

    if (!formData.fullName.trim()) {
      setSnackbar({ open: true, message: 'נא למלא שם מלא', severity: 'error' });
      return;
    }

    if (!formData.phoneNumber.trim()) {
      setSnackbar({ open: true, message: 'נא למלא מספר טלפון', severity: 'error' });
      return;
    }

    if (!formData.email.trim()) {
      setSnackbar({ open: true, message: 'נא למלא דואר אלקטרוני', severity: 'error' });
      return;
    }

    if (!formData.city.trim()) {
      setSnackbar({ open: true, message: 'נא למלא עיר', severity: 'error' });
      return;
    }

    if (!formData.password.trim()) {
      setSnackbar({ open: true, message: 'נא למלא סיסמא', severity: 'error' });
      return;
    }

    if (!validateEmail(formData.email)) {
      setSnackbar({ open: true, message: 'כתובת הדואר האלקטרוני לא תקינה', severity: 'error' });
      return;
    }

    if (!validatePhone(formData.phoneNumber)) {
      setSnackbar({ open: true, message: 'מספר הטלפון לא תקין', severity: 'error' });
      return;
    }

    if (!formData.isAutoGeneratedPassword && formData.password && !validatePassword(formData.password)) {
      setSnackbar({ open: true, message: ' הסיסמא אמורה להכיל אות גדולה וקטנה באנגלית ומספרים לפחות 8 תוים', severity: 'error' });
      return;
    }

    try {
      const response = await axios.post('https://scrolls-website.onrender.com/usersApi/addUser', formData);
      localStorage.setItem('token', response.data.token);
      setSnackbar({ open: true, message: 'המשתמש נוצר בהצלחה!', severity: 'success' });
      dispatch(setUser(formData));
      onClose();
      navigate('/products');
    } catch (error) {
      const errorMessage = error.response?.data?.message || 'שגיאה ביצירת המשתמש';
      if (errorMessage.includes("email")) {
        setSnackbar({ open: true, message: 'הדואר האלקטרוני לא תקין או כבר קיים במערכת', severity: 'error' });
      } else if (errorMessage.includes("phone")) {
        setSnackbar({ open: true, message: 'מספר הטלפון לא תקין או כבר קיים במערכת', severity: 'error' });
      } else if (errorMessage.includes("password")) {
        setSnackbar({ open: true, message: 'הסיסמה לא עומדת בדרישות', severity: 'error' });
      } else if (errorMessage.includes("name")) {
        setSnackbar({ open: true, message: 'שם המשתמש כבר קיים במערכת', severity: 'error' });
      } else {
        setSnackbar({ open: true, message: `שגיאה: ${errorMessage}`, severity: 'error' });
      }
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  return (
    <>
      <Dialog
        open={open}
        onClose={onClose}
        maxWidth="md"
        fullWidth
        sx={{
          direction: 'rtl',
          '& .MuiDialog-paper': {
            borderRadius: '24px',
            width: isMobile ? '95%' : isTablet ? '80%' : '70%',
            margin: isMobile ? '10px' : 'auto',
          }
        }}
      >
        <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', pl: 2 }}>
          <IconButton onClick={onClose}>
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <Typography
          sx={{
            background: 'rgba(230, 219, 201, 1)',
            borderRadius: '39px',
            color: 'rgba(0, 0, 0, 1)',
            fontFamily: 'Heebo, sans-serif',
            fontWeight: 'bold',
            padding: isMobile ? '5px 40px' : isTablet ? '5px 100px' : '5px 160px',
            textAlign: 'center',
            width: 'fit-content',
            marginBottom: '20px',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            margin: '0 auto'
          }}
        >
          יצירת משתמש חדש
        </Typography>
        <DialogContent sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', marginTop: '20px' }}>
          <form onSubmit={handleCreateUserSubmit} style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '15px',
            marginTop: '10px',
            width: isMobile ? '95%' : isTablet ? '80%' : '60%'
          }}>
            <div style={{ display: 'flex', flexDirection: isMobile ? 'column' : 'row', gap: '10px' }}>
              <div style={{ flex: 1 }}>
                <input
                  type="text"
                  name="fullName"
                  placeholder="שם מלא"
                  value={formData.fullName}
                  onChange={handleChange}
                  required
                  style={inputStyle}
                />
              </div>
              <div style={{ flex: 1 }}>
                <input
                  type="text"
                  name="displayName"
                  placeholder="שם תצוגה"
                  value={formData.displayName}
                  onChange={handleChange}
                  required
                  style={inputStyle}
                />
              </div>
            </div>

            <div style={{ display: 'flex', flexDirection: isMobile ? 'column' : 'row', gap: '10px' }}>
              <div style={{ flex: 1 }}>
                <input
                  type="tel"
                  name="phoneNumber"
                  placeholder="מספר טלפון"
                  value={formData.phoneNumber}
                  onChange={handleChange}
                  required
                  style={inputStyle}
                />
              </div>
              <div style={{ flex: 1 }}>
                <input
                  type="tel"
                  name="additionalPhone"
                  placeholder="טלפון נוסף (אופציונלי)"
                  value={formData.additionalPhone}
                  onChange={handleChange}
                  style={inputStyle}
                />
              </div>
            </div>

            <div style={{ display: 'flex', flexDirection: isMobile ? 'column' : 'row', gap: '10px' }}>
              <div style={{ flex: 1 }}>
                <input
                  type="email"
                  name="email"
                  placeholder="דואר אלקטרוני"
                  value={formData.email}
                  onChange={handleChange}
                  required
                  style={inputStyle}
                />
              </div>
              <div style={{ flex: 1 }}>
                <input
                  type="text"
                  name="city"
                  placeholder="עיר"
                  value={formData.city}
                  onChange={handleChange}
                  required
                  style={inputStyle}
                />
              </div>
            </div>

            <div style={{ position: 'relative' }}>
              <input
                type="password"
                name="password"
                placeholder="סיסמא"
                value={formData.password}
                onChange={handleChange}
                required
                autoComplete="new-password"
                style={inputStyle}
              />
            </div>
          </form>

          <FormControlLabel
            sx={{ marginTop: '25px' }}
            control={
              <Checkbox
                checked={termsAccepted}
                onChange={(e) => setTermsAccepted(e.target.checked)}
                required
                sx={{
                  '& .MuiSvgIcon-root': {
                    fontSize: 18,
                  }
                }}
              />
            }
            label={
              <Typography
                sx={{
                  fontFamily: 'Heebo, sans-serif',
                  fontSize: isMobile ? '12px' : '14px',
                  fontWeight: 'normal',
                  color: '#333',
                  display: 'inline-block',
                  marginLeft: '8px'
                }}
              >
                אני מסכים לתקנון האתר וקבלת דיוור&nbsp;
                <a href="/terms.pdf" target="_blank" rel="noopener noreferrer">צפייה בתקנון</a>
              </Typography>
            }
          />

          <Button
            onClick={handleCreateUserSubmit}
            variant="contained"
            disabled={!termsAccepted}
            sx={{
              width: isMobile ? '130px' : '150px',
              gap: '6px',
              backgroundColor: 'rgba(90, 59, 65, 1)',
              borderRadius: '24px',
              fontFamily: 'Heebo, sans-serif',
              height: isMobile ? '25px' : '30px',
              minHeight: isMobile ? '25px' : '30px',
              color: '#fff',
              fontWeight: 200,
              alignSelf: 'center',
              marginTop: '10px'
            }}
          >
            צור משתמש
          </Button>
        </DialogContent>
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={handleCloseSnackbar}
          sx={{ zIndex: 10000 }}
          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        >
          <Alert
            onClose={handleCloseSnackbar}
            severity={snackbar.severity}
            sx={{
              width: '100%',
              fontFamily: 'Heebo, sans-serif',
              marginLeft: '10px',
              marginRight: '10px',
              '& .MuiAlert-message': {
                padding: '8px 0',
                marginRight: '8px',
                marginLeft: '8px'
              },
              '& .MuiAlert-icon': {
                marginRight: '8px'
              }
            }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Dialog>


    </>
  );
};


export default CreateUser;